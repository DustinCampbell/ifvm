// <auto-generated />

using System.Collections.Immutable;

namespace IFVM.Ast
{
    public enum AstNodeKind
    {
    }

    public abstract partial class AstExpression : AstNode
    {
        internal AstExpression(AstNodeKind kind) : base(kind)
        {
        }
    }

    public abstract partial class AstStatement : AstNode
    {
        internal AstStatement(AstNodeKind kind) : base(kind)
        {
        }
    }

    public abstract partial class AstVisitor
    {
        public virtual void Visit(AstNode node)
        {
            node.Accept(this);
        }

        public void VisitList<TNode>(ImmutableList<TNode> list) where TNode : AstNode
        {
            foreach (var item in list)
            {
                Visit(item);
            }
        }
    }

    public abstract partial class AstRewriter
    {
        public virtual AstNode Visit(AstNode node)
        {
            return node.Accept(this);
        }
    }

    public static partial class AstFactory
    {
    }
}
